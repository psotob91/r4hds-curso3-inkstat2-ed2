---
title: "<FONT color='#A7D5E8'>Variables numéricas</FONT>"
subtitle: "<FONT color='#E9AFA3' size='10'>R para Ciencia de Datos en Salud: <br> Análisis Descriptivo e Inferencia Estadística</FONT>"
author: "<FONT color='#FFFFFF' size='30'>Percy Soto-Becerra M.D., M.Sc(c)</FONT>"
institute: "<FONT color='#FFFFFF' size='5'>InkaStats Data Science Solutions | Medical Branch<br>@github/psotob91</FONT>"

format: 
  revealjs:
    self-contained: true
    theme: [simple, theme/theme.scss]
    footer: "Variables numérica"
    slide-number: c/t
    logo: img/logo.png
    width: 1920
    height: 1080
    highlight-style: ayu-dark
    self-contained-math: true
from: markdown+emoji
execute:
  echo: true
---

```{r}
#| label: setup
#| include: false
library(fontawesome)
library(tidyverse)
library(haven)
library(quarto)
library(gt)
library(gtExtras)
library(gtsummary)
library(showtext)
library(rio)
library(skimr)

## Ver QUARTO RSTUDIO CONFERENCE: https://github.com/rstudio-conf-2022/get-started-quarto/blob/main/materials/02-authoring.qmd
## 
## blackboard theme: https://github.com/schochastics/quarto-blackboard-theme
## 
## https://github.com/schochastics/xaringan-themes
```

---

# Análisis descriptivo de variables numéricas

---

## Análisis descriptivo

:::: {.columns}

::: {.column width='47%'}

**[¿Análisis descriptivo?]{.hl}**

-   [¿Cuándo?]{.verd1} Luego de AID uno ya está listo para describir sus datos.

-   [¿Cómo?]{.verd1} Hay muchas formas de describir datos, todos son combinación de `medidas de resumen` en `texto` y `tablas`, así como `gráficos`.

-   [¿Para qué?]{.verd1} 

    + Un fin en sí mismo en estudios descriptivos propiamente dichos.
    
    + Un medio para un fin en estudios que tienen objetivos de inferencia causal o perdicción.
        - Importante describir características para facilitar la comparación de nuestra población de estudio con otras poblaciones.

:::

::: {.column width='4%'}

::: 

::: {.column width='47%'}

**[¿Qué describir de los datos numéricos?]{.hl}**

- [Forma]{.hl}

    + Simetría: Sesgo a la derecha, sesgo a la izquierda, simétrico
    
    + Modas: Unimodal, bimodal, multimodal, uniforme (no moda)
    
    + Curtosis: Solo en distribución unimodal

- [Centro]{.hl}

    + media, mediana, moda (no siempre útil)

- [Dispersión]{.hl}

    + rango (mínimo y máximo), desviación estándar, rango intercuartílico (percentil 25 y 75)

- [Observaciones inusuales]{.hl}

:::

::::


----

## Los datos que usaremos  {.scrollable}

<br/>

>Estudio sobre inmunogenicidad de tercera dosis. Se usó datos simulados del estudio titulado "Immunogenicity and reactogenicity of a third dose of BNT162b2 vaccine for COVID-19 after a primary regimen with BBIBP-CorV or BNT162b2 vaccines in Lima, Peru"<https://doi.org/10.1101/2022.05.01.22274548> 

::: {.panel-tabset}

### Importar

- Importación de datos

```{r}
bd_inmuno <- read_stata("boost_inmuno.dta") %>% 
  as_factor()
```


### Vistazo


```{r}
head(bd_inmuno)
```


### Otro vistazo

```{r}
bd_inmuno %>% glimpse()
```


### Análisis Inicial de Datos (AID)

```{r}
bd_inmuno %>% 
  skim()
```

### Variables según tipo

:::: {.columns}

::: {.column width='50%'}

**[Variables numéricas]{.hl}**

- edad
- tiempo desde segunda dosis a dosis de refuerzo (tercera dosis)
- Nivel basal de IgG
- Nivel final de IgG
    
:::

::: {.column width='50%'}

**[Variables categóricas]{.hl}**

- tipo de refuerzo (dosis 3)
- sexo
- comorbilidades
- antecedente de COVID-19
    
:::

::::

:::


---

## ¿Cómo describir en los datos numéricos?

<br/>

- [Medidas numéricas de resumen en tablas o texto]{.hl}

    + Medidas de tendencia central
    
    + Medidas de posición
    
- [Gráficos]{.hl}

    - Histogramas 
        
    - Densidad
        
    - Cajas 
        
    - Violin
        
    - Puntos
        
    - Combinación de gráficos

---

# Gráficos

---

## Intro sobre gráficos de variables numéricas

<br/>

- Permiten visualizar la distribución de la variable numérica en la muestra de datos.

- Hay varios tipos de gráficos que pueden hacerse para inspeccionar la variable numérica.

- Hay que distinguir dos tipos de gráficos:

    + Los de inspección: Deben ser rápidos de generar y leer, aunque no sean tan personalizables o elegantes. Usar funciones `wrapper()` de otros paquetes ayuda mucho. Usaremos [{ggpubr}]{.plo}
    
    + Los de reporte: Deben ser elegantes y super personalizados., aunque se demoren en generarse. ¡[{ggplot2}]{.plo} es fenomenal para estos!
    
---

## {.scrollable}

:::: {.columns}

::: {.column width='47%'}

### ggplot2

**[Pros]{.hl}**

- Paquete que proporciona funciones que siguen la `gramática de gráficos`.

- Altamante personalizable:

    + Prácticamente no hay ningún gráfico que no puedas crear con ggplot2.

**[Contras]{.hl}**

- Aunque cuenta con varios atajos de personalización (p. ej., theme_), sigue requiriendo bastante código.

- Se deben dibujar una variable a la vez. Dibujar varias variables a la vez es un poco más "tricky" y requiere un poco de programación en R.

:::

::: {.column width='4%'}

:::

::: {.column width='47%'}

### ggpubr

**[Pros]{.hl}**

- Es un atajo o "wrapper" de ggplot2. 

    + Puedo seguir usando funciones de ggplot agregando capas adicionales con operador: `+`

- Se requiere mucho menos código para gráficos de interés y se pueden graficar varias variables a la vez.

**[Contras]{.hl}**

- Su capacidad de personalización es menor que ggplot2. Sin embargo, al construirse sobre ggplot2, puede seguir modificándose sobre este.

- Dependes de los gráficos iniciales que ggpubr te ofrece.

:::

::::

---

## Histogramas de frecuencias

::: {.panel-tabset}

### ggplot2

>Podemos crear histogramas usando la geometría `geom_histogram()`.

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1|2|3|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram()
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram() 
```

:::

::::


### binwidth

>Se puede configurar el ancho de las barras (*bins* e inglés).

:::: {.columns}

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| code-line-numbers: "1,2|3|"
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(binwidth = 5) 
```


:::

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(binwidth = 50) 
```

:::

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(binwidth = 200) 
```

:::

::::

### personalizar

> Podemos personalizar el gráfico agregando capas. Por ejemplo, podemos usar `labs()` y `theme_`:

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2,3|4|5|6|4,5,6|7|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(binwidth = 5) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Frecuencia", 
       title = "Distribución de la IgG") + 
  theme_bw()
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(binwidth = 5) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Frecuencia", 
       title = "Distribución de la IgG") + 
  theme_bw()
```

:::

::::

### más info

<br/><br/>
[Más información en el siguiente enlace:]{.big-text1}

[<https://ggplot2.tidyverse.org/reference/geom_histogram.html>]{.big-text1}

:::

--- 

## Histogramas de densidades

::: {.panel-tabset}

### ggplot2

>Podemos usar densidades en vez de frecuencias absolutas o relativas en los histogramas. En variables continuas, las densidades se aproximan mejor a la idea de densidad de probabilidad

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2|3|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..))
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..))
```
:::

::::


### binwidth

>Se puede configurar el ancho de las barras (*bins* e inglés).

:::: {.columns}

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), 
                 binwidth = 5)
```

:::

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), 
                 binwidth = 50)
```

:::

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), 
                 binwidth = 200)
```

:::

::::

### personalizar

> Podemos personalizar el gráfico agregando capas. Por ejemplo, podemos usar `labs()` y `theme_`:

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2,3|4|5|6|4,5,6|7|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), binwidth = 5) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Frecuencia", 
       title = "Distribución de la IgG") + 
  theme_bw()
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), binwidth = 5) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Frecuencia", 
       title = "Distribución de la IgG") + 
  theme_bw()
```

:::

::::

### más info

<br/><br/>
[Más información en el siguiente enlace:]{.big-text1}

[<https://ggplot2.tidyverse.org/reference/geom_histogram.html>]{.big-text1}


:::

---

## Densidad


::: {.panel-tabset}

### ggplot2

>En vez de graficar histogramas, podemos dibujar gráfico de densidades cuyas curvas están suavizadas imitando el aspecto de una distribución de probabilidad. Usamo la geometría `geom_density()`.

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2|3|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density()
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density()
```
:::

::::

### adjust

>Se puede configurar el parámetro de suavización adjust

:::: {.columns}

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density(adjust = 0.1)
```


:::

::: {.column width='33.33%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density(adjust = 0.5)
```

:::

::: {.column width='33.33%'}

```{r}
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density(adjust = 2)
```

:::

::::

### Personalizar

> Podemos personalizar el gráfico agregando capas. Por ejemplo, podemos usar `labs()` y `theme_`:

:::: {.columns}

::: {.column width='40%'}

```{r}
#| eval: false
#| code-line-numbers: "1,2,3|4,5,6|7|"
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density(adjust = 1) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Densidad", 
       title = "Distribución de la IgG") + 
  theme_bw()
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_density(adjust = 1) + 
  labs(x = "Ig G al inicio del estudio", 
       y = "Densidad", 
       title = "Distribución de la IgG") + 
  theme_bw()
```


:::

::::

### más info

<br/><br/>
[Más información en el siguiente enlace:]{.big-text1}

[<https://ggplot2.tidyverse.org/reference/geom_density.html>]{.big-text1}

:::

---

## Gráfico de cajas 

::: {.panel-tabset}

### ggplot2

>Podemos crear gráficos de cajas usando la geometría `geom_boxplot()`.

:::: {.columns}

::: {.column width='50%'}

[Cajas horizontales]{.hl}

```{r}
#| code-line-numbers: "1|2|3|"
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_boxplot()
```

:::

::: {.column width='50%'}

[Cajas verticales]{.hl}

```{r}
#| code-line-numbers: "1|2|3|"
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(y = IgG_Basal)) + 
  geom_boxplot()
```

:::

::::

### personalizar

> Podemos personalizar el gráfico agregando capas. Por ejemplo, podemos usar `labs()` y `theme_`. También podemos eliminar los números y guiones del eje x usando `theme()`.

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2,3|4|5|6|3,5,6|7|4,5,6|7|8|7,8|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(y = IgG_Basal)) + 
  geom_boxplot() + 
  labs(x = NULL, 
       y = "IgG basal (AU/mL)", 
       title = "Gráfico de cajas de IgG basal") + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank())
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(y = IgG_Basal)) + 
  geom_boxplot() + 
  labs(x = NULL, 
       y = "IgG basal (AU/mL)", 
       title = "Gráfico de cajas de IgG basal") + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank())
```

:::

::::

### partes

:::: {.columns}

::: {.column width='40%'}

- Anatomía:

    + `Bordes de caja`: percentil 25 (cuartil 1) y 75 (cuartil 3)
    
    + `Linea horizontal dentro de caja`: percentil 50 (cuartil 2 o mediana)
    
    + `Rango intercuartílico (IQR)`: percentil 75- percentil 25
    
    + `Bigotes`: ± 1.5 IQR
    
    + `Puntos fuera de bigotes`: Outliers según regla de Tukey
    
:::

::: {.column width='60%'}

```{r}
#| echo: false
#| out-width: 100%
#| fig-align: center
bd_inmuno %>% 
  ggplot(aes(y = edad)) + 
  geom_boxplot() + 
  labs(x = NULL, 
       y = "Edad (años)", 
       title = "Gráfico de cajas de Edad") +  
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) +
  annotate("text", x = 0.2, y = 62, label = "Percentil 75 = Cuartil 3", color = "red") + 
  annotate("text", x = 0.2, y = 49, label = "Percentil 50 = Cuartil 2 = Mediana", color = "red") + 
  annotate("text", x = 0.2, y = 39, label = "Percentil 25 = Cuartil 1", color = "red") + 
  annotate("text", x = 0.16, y = 90, label = "Extremo superior (p75 + 1.5 * IQR)", color = "red") + 
  annotate("text", x = 0.15, y = 25, label = "Extremo inferior (p75 - 1.5 * IQR)", color = "red") + 
  annotate("text", x = 0.13, y = 95, label = "Datos extremos ('outliers')", color = "red") 
```


:::

::::


### notas 

- Aunque se puede usar en gráficos univariados, no es un muy gráfico para estos fines.

    - ¡Es mejor para realizar comparaciones en análisis bivariados!

- Los "outliers" o valores extremos son solo referenciales.

- Las cajas sugieren simetría de distribución, pero no permiten ver la forma directamente: 

:::: {.columns}

::: {.column width='50%'}

[Distribución simétrica]{.hl}

```{r}
#| echo: false
set.seed(123)
datos <- data.frame(
  simetrico = rnorm(100), 
  asimetrico = rexp(100, 0.5)
)
```

```{r}
#| echo: false
datos %>%  
  ggplot(aes(x = simetrico)) +  
  geom_boxplot()
```


:::

::: {.column width='50%'}

[Distribución asimétrica]{.hl}

```{r}
#| echo: false
datos %>%  
  ggplot(aes(x = asimetrico)) +  
  geom_boxplot()
```

:::

::::



### más info

<br/><br/>
[Más información en el siguiente enlace:]{.big-text1}

[<https://ggplot2.tidyverse.org/reference/geom_boxplot.html>]{.big-text1}

:::


---
    
## Violin

::: {.panel-tabset}

### ggplot2

>Gráficos de violin son similares a gráficos de caja, excepto porque también muestran la densidad de probabilidad.

:::: {.columns}

::: {.column width='50%'}

[Cajas horizontales]{.hl}

```{r}
#| code-line-numbers: "1|2|3|"
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin()
```

:::

::: {.column width='50%'}

[Cajas verticales]{.hl}

```{r}
#| code-line-numbers: "1|2|3|"
#| fig-align: center
#| out-width: 100%
#| message: true
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin()
```

:::

::::

### personalizar

> Podemos personalizar el gráfico agregando capas. Por ejemplo, podemos usar `labs()` y `theme_`. También podemos eliminar los números y guiones del eje x usando `theme()`.

:::: {.columns}

::: {.column width='40%'}

```{r}
#| code-line-numbers: "1,2,3|4|5|6|3,5,6|7|4,5,6|7|8|9|8,9|"
#| eval: false
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() + 
  labs(x = NULL, 
       y = "IgG basal (AU/mL)", 
       title = "Gráfico de violin de IgG basal") + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 
```

:::

::: {.column width='60%'}

```{r}
#| fig-align: center
#| out-width: 100%
#| message: true
#| echo: false
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() + 
  labs(x = NULL, 
       y = "IgG basal (AU/mL)", 
       title = "Gráfico de violin de IgG basal") + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 
```

:::

::::

### notas 

- A menudo se reportan combinado con un gráfico de cajas, puntos o ambos.

- Los gráficos de violin combinados dan mucha más información, por lo que se debería preferir usar.

- Contraindicación: Si se cuentan con pocos datos, los gráficos de kernel no son confiables.

:::: {.columns}

::: {.column width='50%'}

[Distribución simétrica]{.hl}

```{r}
#| echo: false
set.seed(123)
datos <- data.frame(
  simetrico = rnorm(100), 
  asimetrico = rexp(100, 0.5)
)
```

```{r}
#| echo: false
datos %>%  
  ggplot(aes(x = 1, y = simetrico)) +  
  geom_violin() + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 
```


:::

::: {.column width='50%'}

[Distribución asimétrica]{.hl}

```{r}
#| echo: false
datos %>%  
  ggplot(aes(x = 1, y = asimetrico)) +  
  geom_violin() + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 
```

:::

::::



### más info

<br/><br/>
[Más información en el siguiente enlace:]{.big-text1}

[<https://ggplot2.tidyverse.org/reference/geom_violin.html>]{.big-text1}

:::

---
    
## Combinación de gráficos {.scrollable}

>Se sugiere reportar gráficos descriptivos que sean informativos. Estos pueden obtenerse de combinar gráficos existentes. Veremos algunos ejemplos.

::: {.panel-tabset}

### histograma+densidad

:::: {.columns}

::: {.column width='50%'}

[Sin personalizar]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..)) + 
  geom_density()
```

:::

::: {.column width='50%'}

[Personalizado]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = IgG_Basal)) + 
  geom_histogram(aes(y = ..density..), colour = "black", fill = "white") + 
  geom_density(fill = 4, alpha = 0.25) + 
  theme_minimal()
```

:::

::::

### caja+dotplot

:::: {.columns}

::: {.column width='50%'}

[Sin personalizar]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_boxplot() + 
  geom_dotplot(binaxis = "y", stackdir = "center") 
```

:::

::: {.column width='50%'}

[Personalizado]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|1,2,3,4|5|6|7,8|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_boxplot() + 
  geom_dotplot(binaxis = "y", stackdir = "center") + 
  labs(x = NULL, y = "IgG basal (AU/ml)") + 
  theme_minimal() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 

```

:::

::::

### cajas+puntos

:::: {.columns}

::: {.column width='50%'}

[Sin personalizar]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_boxplot() +
  geom_jitter()
```

:::

::: {.column width='50%'}

[Personalizado]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|5,6,7,8|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_boxplot() +
  geom_jitter() + 
  labs(x = NULL, y = "IgG basal (AU/ml)") + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 

```

:::

::::

### violin+caja

:::: {.columns}

::: {.column width='50%'}

[Sin personalizar]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() +
  geom_boxplot(width = 0.1)
```

:::

::: {.column width='50%'}

[Personalizado]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|5,6,7,8|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() +
  geom_boxplot(width = 0.1) + 
  labs(x = NULL, y = "IgG basal (AU/ml)") + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 

```

:::

::::


### todo

:::: {.columns}

::: {.column width='50%'}

[Sin personalizar]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|5|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() +
  geom_boxplot(width = 0.1, outlier.color = "white") + 
  geom_jitter()
```

:::

::: {.column width='50%'}

[Personalizado]{.hl}

```{r}
#| code-line-numbers: "1|2|3|4|5|6,7,8,9|"
#| fig-align: center
#| out-width: 100%
bd_inmuno %>% 
  ggplot(aes(x = 1, y = IgG_Basal)) + 
  geom_violin() +
  geom_boxplot(width = 0.1, outlier.color = "white") + 
  geom_jitter(color = "blue") + 
  labs(x = NULL, y = "IgG basal (AU/ml)") + 
  theme_bw() + 
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank()) 

```

:::

::::

:::


---


```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```


# `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<br/>

-   Descargue la carpeta `var_num_graficos`.

- Abra el proyecto `var_num_graficos.Rproj` y dentro de este, abra el archivo quarto `var_num_graficos.qmd`. 

- Siga las instrucciones indicadas en este.

- Renderice el archivo quarto final.

<br/><br/><br/>  

```{R}
#| echo: false
countdown_timer(10)
```
