---
title: "<FONT color='#A7D5E8'>Reporte Reproducible Univariado</FONT>"
subtitle: "<FONT color='#E9AFA3' size='10'>R para Ciencia de Datos en Salud: <br> Análisis Descriptivo e Inferencia Estadística</FONT>"
author: "<FONT color='#FFFFFF' size='30'>Percy Soto-Becerra M.D., M.Sc(c)</FONT>"
institute: "<FONT color='#FFFFFF' size='5'>InkaStats Data Science Solutions | Medical Branch<br>@github/psotob91</FONT>"

format: 
  revealjs:
    self-contained: true
    theme: [simple, theme/theme.scss]
    footer: "Reporte Reproducible Univariado"
    slide-number: c/t
    logo: img/logo.png
    width: 1920
    height: 1080
    highlight-style: ayu-dark
    self-contained-math: true
from: markdown+emoji
execute:
  echo: true
---

```{r}
#| label: setup
#| include: false
library(fontawesome)
library(tidyverse)
library(quarto)
library(gt)
library(gtExtras)
library(gtsummary)
library(showtext)
library(haven)
library(labelled)
library(kableExtra)
library(magick)
library(webshot2)
library(rmarkdown)
library(flextable)
library(huxtable)

## Ver QUARTO RSTUDIO CONFERENCE: https://github.com/rstudio-conf-2022/get-started-quarto/blob/main/materials/02-authoring.qmd
## 
## blackboard theme: https://github.com/schochastics/quarto-blackboard-theme
## 
## https://github.com/schochastics/xaringan-themes
```

---

# Crisis de Reproducibilidad

## La crisis de Reproducibilidad

<br/> 

:::: {.columns}

::: {.column width='60%'}

<br/>

- Calidad de la investigación médica a menudo es baja.

- [Código de baja calidad]{.hl} en investigación médica es parte del problema.

- [Código de baja calidad]{.hl} es [más propenso]{.hl} a [tener errores]{.hl}.

- Reproducibilidad a menudo es [engorrosa]{.hl} y [consume tiempo]{.hl}.

:::

::: {.column width='40%'}

```{r}
#| echo: false
#| out-width: 100%
#| fig-align: center
knitr::include_graphics("img/reproducibility-graphic-online1.jpeg")
```

:::

::::

::: aside
<https://www.nature.com/news/1-500-scientists-lift-the-lid-on-reproducibility-1.19970> <br/>
<https://www.danieldsjoberg.com/clinical-reporting-gtsummary-rmed/slides/#/reproducibility-crisis>
:::

# Reporte Reproducible

## ¿Cómo hacer que un análisis de datos sea reproducible?

<br/> 

-   No cree la tabla "manualmente".

-   [Genere]{.hl} las [tablas]{.hl} con [código]{.hl}: 

    -   Es [reproducible]{.hl}. 
    -   Menos propenso a error de digitación o *lapsus calamis*. 
    -   Han habido retracciones de ensayos clínicos por errores de tipeo!! 
    -   Es más rápido, ahorrarás tiempo!! 

-   A la [tabla descriptiva]{.hl} menudo se la conoce como tablas [tipo 1]{.hl}.

    -   Puede haber más de una, no hay reglas, solo buenos o malos criterios para presentar resultados. 
    
-   Hay muchos paquetes: [{flextable}]{.plo}, [{gt}]{.plo},[{huxtable}]{.plo}, [{kableExtra}]{.plo}, [{kable}]{.plo}, etc.
-   Sugerimos [{gtsummary}]{.plo} para comenzar:

[[https://www.danieldsjoberg.com/gtsummary/](https://www.danieldsjoberg.com/gtsummary/)]{.big-text1}


## Tabla decriptiva reproducible con {gtsummary}

-   Permite [crear tablas]{.hl} en formato de [revistas biomédicas]{.hl}.

-   Función [tbl_summary()]{.hl} para tablas descriptivas univariadas y comparativas (bivariadas)

<center>![](img/tbl_summary_demo1.gif)</center>

<center>[<https://www.danieldsjoberg.com/gtsummary/>]{.big-text1}</center>

## Los datos que usaremos

:::: {.columns}

::: {.column width='70%'}

- Usaremos los datos simulados de un ensayo clínico para evaluar la seguridad de un suplemento en outcomes clinico y fisiologicos de mujeres con menopausia:

```{r}
#| echo: false
library(haven)
datos <- read_stata("maca_meno_fase1.dta") %>% 
  as_factor() %>% 
  select(id, time, treat, age, race, married2, procedence, weight, height, e2) %>% 
  mutate(treated = case_when(
    treat == "Placebo" ~ 0, 
    treat %in% c("Dosis 1", "Dosis 2") ~ 1, 
    TRUE ~ as.numeric(NA)
  )) %>% 
  set_variable_labels(treated = "Treated") %>% 
  select(id, time, treat, treated, age, race, married2, procedence, weight, height, e2)
```

```{r}
#| echo: false
head(datos) %>% 
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                full_width = T,
                font_size = 30) 
  # kable_paper("striped", full_width = F) %>%               
  # column_spec(1, bold = T) %>%
  # collapse_rows(columns = 1:2, valign = "top")  %>% 
  # row_spec(0, background = "black", color = "white", bold = TRUE) %>% 
  # row_spec(c(1, 3:5), background = "white", color = "black", bold = TRUE) %>% 
  # row_spec(c(2, 6, 7), background = "gray", color = "white", bold = TRUE)
```

:::

::: {.column width='30%'}

- Las etiquetas de cada variable son:

```{r}
#| echo: false
#| label: 'describe-small-trial'
tibble(
  Variable = names(datos),
  Label = map_chr(Variable, ~attr(datos[[.x]], "label"))
  ) %>%  
  kbl() %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                full_width = T,
                font_size = 30) 
```

:::

::::

# tbl_summary() paso a paso

## tbl_summary() básico {}

:::: {.columns}

::: {.column width='50%'}

- Seleccionar las variables que desea reportar con función [select()]{.plo}, luego usar [tbl_summary()]{.plo}:

```r
library(gtsummary)
datos %>% 
  select(age, race, married2, e2) %>% 
  tbl_summary()
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
library(gtsummary)
datos %>% 
  select(age, treated, married2, e2) %>% 
  tbl_summary() %>% 
  as_gt() %>% 
  gtsave("tab1.png", "img/")

knitr::include_graphics("img/tab1.png")
```

:::

::: {.column width='50%'}

- Cuarto tipo de resumenes: [continuous]{.hl}, [continuos2]{.hl}, [categorical]{.hl} y [dichotomous]{.hl}

- Por defecto, los estadísticos son reportadas como [mediana]{.hl} ([percentil 25]{.hl}, [percentil 75]{.hl}) para variables numéricas y [n (%)]{.hl} para variables categóricas/dicotómicas.

- Las variables codificadas como [0]{.hl} / [1]{.hl}, [TRUE]{.hl} / [FALSE]{.hl} o [Yes]{.hl} / [No]{.hl} son tratadas como dicotómicas.

- Los valores [NA]{.hl} se listan como "Unknown

- Los atributos de etiqueta se imprimen por defecto.

- Uno puede realizar más personalizaciones a la tabla.

:::

::::


## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary()
```

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary() %>% 
  as_gt() %>% 
  gtsave("tab2.png", "img/")

knitr::include_graphics("img/tab2.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous")
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen 

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous")
  ) %>% 
  as_gt() %>% 
  gtsave("tab3.png", "img/")

knitr::include_graphics("img/tab3.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      age ~ "{mean} ({sd})", 
      married2 ~ "{n}  / {N} ({p}%)"
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      age ~ "{mean} ({sd})", 
      married2 ~ "{n}  / {N} ({p}%)"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab4.png", "img/")

knitr::include_graphics("img/tab4.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      c(age, height) ~ "{mean} ({sd})", 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

    + Usar [c()]{.hl} para varias variables.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      c(age, height) ~ "{mean} ({sd})", 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab5.png", "img/")

knitr::include_graphics("img/tab5.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{median} ({p25} - {p75})"), 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

    + Usar [c()]{.hl} para varias variables.
    
    + Si queremos reportar más estadísticos en variables numéricas usamos [continuous2]{.hl}

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{median} ({p25} - {p75})"), 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab6.png", "img/")

knitr::include_graphics("img/tab6.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{median} ({p25} - {p75})", 
                         "{min} - {max}"), 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

    + Usar [c()]{.hl} para varias variables.
    
    + Si queremos reportar más estadísticos en variables numéricas usamos [continuous2]{.hl}
    
        + Podemos ponerle cuantos estadísticos queramos.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{median} ({p25} - {p75})", 
                         "{min} - {max}"), 
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab7.png", "img/")

knitr::include_graphics("img/tab7.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  ) 
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

    + Usar [c()]{.hl} para varias variables.
    
    + Si queremos reportar más estadísticos en variables numéricas usamos [continuous2]{.hl}
    
        + Podemos ponerle cuantos estadísticos queramos.
        
        + Podemos tener diferentes combinaciones de estadísticos.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab8.png", "img/")

knitr::include_graphics("img/tab8.png")
```

:::

::::

## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

- [label]{.hl}: Cambia o personaliza la etiqueta de la variable.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", 
      e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab9.png", "img/")

knitr::include_graphics("img/tab9.png")
```

:::

::::


## Personalización del resultado de tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    )
  )
```

- [type]{.hl}: Especifica el tipo de variable para el resumen.

- [statistic]{.hl}: Personaliza los estadísticos reportados.

- [label]{.hl}: Cambia o personaliza la etiqueta de la variable.

- [digit]{.hl}: Especifica el número de decimales de redondeo.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", 
                         "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})",
                "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", 
      e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, 
      c(married2, treated) ~ 1
    )
  ) %>% 
  as_gt() %>% 
  gtsave("tab10.png", "img/")

knitr::include_graphics("img/tab10.png")
```

:::

::::

## Reporte de datos perdidos con tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing_text = "Missing data"
  ) 
```

- [misisng_text]{.hl}: Permite editar la etiqueta de missing ([Unknown]{.hl} por defecto).

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing_text = "Missing data"
  ) %>% 
  as_gt() %>% 
  gtsave("tab11.png", "img/")

knitr::include_graphics("img/tab11.png")
```

:::

::::

## Reporte de datos perdidos con tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing = "always", missing_text = "Missing data"
  )  
```

- [misisng_text]{.hl}: Permite editar la etiqueta de missing ([Unknown]{.hl} por defecto).

- [missing]{.hl}: Por defecto se presentan los datos perdidos solo si la variable los tiene ["ifany"]{.hl}.

    + [missing = "always"]{.hl} siempre presenta datos perdidos.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing = "always", missing_text = "Missing data"
  ) %>% 
  as_gt() %>% 
  gtsave("tab12.png", "img/")

knitr::include_graphics("img/tab12.png")
```

:::

::::


## Reporte de datos perdidos con tbl_summary() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing = "no"
  ) 
```

- [misisng_text]{.hl}: Permite editar la etiqueta de missing ([Unknown]{.hl} por defecto).

- [missing]{.hl}: Por defecto se presentan los datos perdidos solo si la variable los tiene ["ifany"]{.hl}.

    + [missing = "always"]{.hl} siempre presenta datos perdidos, así la variable no los tenga.
    + [missing = "no"]{.hl} nunca presenta datos perdidos, así la variable los tenga.

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(c(age, height, e2) ~ "continuous2"), 
    statistic = list(
      c(age, height) ~ c("{mean} ({sd})", "{min} - {max}"), 
      c(e2) ~ c("{median} ({p25} - {p75})", "{min} - {max}"),       
      c(married2, treated) ~ "{n}  / {N} ({p}%)"
    ), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    digits = list(
      c(age) ~ 1, c(height, e2) ~ 2, c(married2, treated) ~ 1
    ), 
    missing = "no"
  ) %>% 
  as_gt() %>% 
  gtsave("tab13.png", "img/")

knitr::include_graphics("img/tab13.png")
```

:::

::::

## En resumen: {gtsummary} + fórmulas

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/Dan-SummaryTables-5.png")
```

## Personzalización con bold_*() / italicize_*() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) 
```

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  as_gt() %>% 
  gtsave("tab14.png", "img/")

knitr::include_graphics("img/tab14.png")
```

:::

::::

## Personzalización con bold_*() / italicize_*() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```{r}
#| eval: false
#| code-line-numbers: 11|
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels()
```

- [bold_labels()]{.hl}: negrita a las etiquetas de las variables

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab15.png", "img/")

knitr::include_graphics("img/tab15.png")
```

:::

::::

## Personzalización con bold_\*() / italicize_\*() {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}

```{r}
#| eval: false
#| code-line-numbers: 12|
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  italicize_levels() 
```

- [bold_labels()]{.hl}: negrita a las etiquetas de las variables

- [italicize_levels()]{.hl}: cursiva a los niveles (valores) de las variables

:::

::: {.column width='50%'}

```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 45%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  italicize_levels() %>% 
  as_gt() %>% 
  gtsave("tab16.png", "img/")

knitr::include_graphics("img/tab16.png")
```

:::

::::


## Guardar tabla como documento MS Word {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}
- Se puede [descargar]{.hl} la tabla en formato [MS. Word]{.hl} para [reporte reproducible]{.hl}.

- Primero se  [guarda]{.hl}  como un [objeto]{.hl} de [R]{.hl}:

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1 

tabla1
```
:::

::: {.column width='50%'}

```{r}
#| echo: false
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

## Guardar tabla como documento MS Word {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}
- Se puede [descargar]{.hl} la tabla en formato [MS. Word]{.hl} para [reporte reproducible]{.hl}.

- Primero se  [guarda]{.hl}  como un [objeto]{.hl} de [R]{.hl}:

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1 

tabla1
```
:::

::: {.column width='50%'}

```{r}
#| echo: false
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

- Luego, al objeto se lo [guarda]{.hl} como un archivo de [MS Word]{.hl}. 


## Guardar tabla como documento MS Word {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}
- Se puede [descargar]{.hl} la tabla en formato [MS. Word]{.hl} para [reporte reproducible]{.hl}.

- Primero se  [guarda]{.hl}  como un [objeto]{.hl} de [R]{.hl}:

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1 

tabla1
```
:::

::: {.column width='50%'}

```{r}
#| echo: false
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

- Luego, al objeto se lo [guarda]{.hl} como un archivo de [MS Word]{.hl}. 

:::: {.columns}

::: {.column width='30%'}

```{r}
library(flextable)
```

:::

::: {.column width='70%'}

- Paso 1: Cargar paquete [{flextable}]{.plo}

:::

::::


## Guardar tabla como documento MS Word {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}
- Se puede [descargar]{.hl} la tabla en formato [MS. Word]{.hl} para [reporte reproducible]{.hl}.

- Primero se  [guarda]{.hl}  como un [objeto]{.hl} de [R]{.hl}:

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1 

tabla1
```
:::

::: {.column width='50%'}

```{r}
#| echo: false
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

- Luego, al objeto se lo [guarda]{.hl} como un archivo de [MS Word]{.hl}. 

:::: {.columns}

::: {.column width='30%'}

```{r}
library(flextable)

tabla1 %>% 
  as_flex_table() 
```

:::

::: {.column width='70%'}

- Paso 1: Cargar paquete [{flextable}]{.plo}

- Paso 2: Se convierte a objeto de tipo [flextable]{.hl} con la función [as_flex_table()]{.plo}.


:::

::::


## Guardar tabla como documento MS Word {auto-animate="true"}

:::: {.columns}

::: {.column width='50%'}
- Se puede [descargar]{.hl} la tabla en formato [MS. Word]{.hl} para [reporte reproducible]{.hl}.

- Primero se  [guarda]{.hl}  como un [objeto]{.hl} de [R]{.hl}:

```r
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1 

tabla1
```
:::

::: {.column width='50%'}

```{r}
#| echo: false
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() -> tabla1
```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: false
#| fig-align: center
#| out-width: 50%
#| code-overflow: wrap
datos %>% 
  select(age, treated, married2, height, e2) %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    label = list(
      treated ~ "Treated with supplement", e2 ~ "Estradiol, UI",
      married2 ~ "Marital status"
    ), 
    missing = "ifany"
  ) %>% 
  bold_labels() %>% 
  as_gt() %>% 
  gtsave("tab17.png", "img/")

knitr::include_graphics("img/tab17.png")
```

:::

::::

- Luego, al objeto se lo [guarda]{.hl} como un archivo de [MS Word]{.hl}: 


:::: {.columns}

::: {.column width='30%'}

```{r}
library(flextable)

tabla1 %>% 
  as_flex_table() %>% 
  save_as_docx(path = "Tabla1.docx")
```

:::

::: {.column width='70%'}

- Paso 1: Cargar paquete [{flextable}]{.plo}

- Paso 2: Se convierte a objeto de tipo [flextable]{.hl} con la función [as_flex_table()]{.plo}.

- Paso 3: Se guarda como word con la función [save_as_docx()]{.plo}

:::

::::


## Guardar tabla como documento MS Word (cont.)

- El [MS Word]{.hl} aparecerá en la [carpeta]{.hl}  del [proyecto]{.hl}:

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/tabla1-rstudio.png")
```


## Guardar tabla como documento MS Word (cont.)

- Y la [tabla]{.hl} en [Word]{.hl} lucirá así:

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/tabla1-word.png")
```

## Guardar tabla como documento MS Excel

:::: {.columns}

::: {.column width='30%'}

- Usamos el paquete [{huxtable}]{.plo}

```{r}
library(huxtable)
```

- Con la función [as_hux_xlsx]{.plo} convertimos el objeto [tbl_summary]{.hl} a un excel con un nombre de archivo que uno defina:
 
```{r}
tabla1 %>% 
  as_hux_xlsx(file = "Tabla1.xlsx")
```

:::

::: {.column width='70%'}


- La tabla en excel se muestra a continuación:

```{r}
#| echo: false
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("img/tabla1-excel.png")
```

:::

::::


```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#000000",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

# `r fontawesome::fa("laptop-code", "white")` Nuestro turno {background-color="#000000"}

<br/>

- Abra el proyecto `report_reprod_univ.Rproj` y dentro de este, abra el archivo quarto `report_reprod_univ.qmd`. 

- Siga las instrucciones indicadas en este.

- Renderice el archivo quarto final.

<br/><br/><br/>  

```{R}
#| echo: false
countdown_timer(10)
```