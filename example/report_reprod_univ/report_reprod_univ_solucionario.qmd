---
title: "Taller: Tabla univariada reproducibles"
Author: Percy Soto-Becerra
---


## Introducción

Vamos a trabajar con los datos simulados de un ensayo clínico publicado sobre el efecto de un suplemento en desenlaces metabólicos y hormonales en mujeres con menopausia.

## Cargar paquetes 

```{r}
library(tidyverse)      # Varios paquetes para funciones diveresas {dplyr}, {ggplot2}
library(rio)            # Navaja suiza para importar datos en R
library(skimr)          # Funciones para describir datos de manera rápida en AID/AED
library(DescTools)      # Funciones para describir datos de manera rápida en AID/AED
library(gtsummary)      # Generar tablas en format gtsummary
library(flextable)      # Convertir a flex_table y guardar como MS Word las tablas
library(huxtable)       # Convertir a hux_table y guardar como MS Excel las tablas
library(labelled)       # Varias funciones para etiquetado de las variables
``` 

## Importar datos

```{r}
datos <- import("datos_maca_tabla1.rds")
```

## Análisis Inicial de Datos

- Vistazo:

```{r}
datos %>% 
  glimpse()
```

- Seis primeras filas:

```{r}
datos %>% 
  head()
```

- Análisis inicial de datos de todas las variables:

```{r}
datos %>% 
  skim()
```

- Análisis inicial de datos de todas las variables (con gráficos de distribución):

```{r}
datos %>% 
  Desc()
```

- ¿Qué variables numéricas tienen distribución aproximadamente...?

**Simétrica:** Edad

**Simétrica acampanda - tipo "normal":** Ninguna

**Asimétrica:** weight, height, e2, lh, fsh, prog

## Preprocesamiento de datos para preparar tabla 1

- Seleccionar variables a incluir en tabla 1 y filtrar a la medición basal

```{r}
datos %>% 
  filter(time == "Baseline") %>% 
  select(treated, age, race, married2, procedence, weight, height, e2, lh, fsh, prog) -> datos_tabla
```

- Etiquetar nombre de variables como se desee que aparezcan en la tabla. El nombre de las variables debe estar en español.

```{r}
datos_tabla %>% 
  set_variable_labels(
    treated = "Tratado, Suplemento", 
    age = "Edad, años", 
    race = "Raza", 
    married2 = "Estado civil", 
    procedence = "Procedencia", 
    weight = "Peso, kg", 
    height = "Talla, m", 
    e2 = "Estradiol, UI", 
    lh = "Hormona Luteinizante, UI", 
    fsh = "Hormona Foliculo Estimulante, UI", 
    prog = "Progesterona, UI"
  ) -> datos_tabla_v2
```

- Opción alternativa (`RECOMENDADA`): Podemos filtrar, seleccionar y etiquetar en un solo `pipeline`: 

```{r}
datos %>%  
  # Solo filtrar a las mediciones basales
  filter(time == "Baseline") %>% 
  # Seleccionar las columnas para reportar en la tabla 1
  select(treated, age, race, married2, procedence, weight, height, e2, lh, fsh, prog) %>% 
  # Etiquetar variables según como quieren que se reporten en la tabla reproducible
  set_variable_labels(
    treated = "Tratado, Suplemento", 
    age = "Edad, años", 
    race = "Raza", 
    married2 = "Estado civil", 
    procedence = "Procedencia", 
    weight = "Peso, kg", 
    height = "Talla, m", 
    e2 = "Estradiol, UI", 
    lh = "Hormona Luteinizante, UI", 
    fsh = "Hormona Foliculo Estimulante, UI", 
    prog = "Progesterona, UI"
  ) -> datos_tabla_final
```

## Creación de tabla 1 descriptiva general paso a paso

- Creación de Tabla 1 básica:

```{r}
datos_tabla_final %>% 
  tbl_summary()
```

- Corregir problema de tipo de variable para `height`:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(height ~ "continuous")
  )
```

- Cambiar estadísticos para reportar en variables numéricas simétricas a media y desviación estándar:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      age ~ "{mean} ({sd})"
    )
  )
```

- Agregar rango a todas las variables numéricas, reportar en misma celda:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(height ~ "continuous"), 
    statistic = list(
      age ~ "{mean} ± {sd} ({min} - {max})", 
      c(height, weight, e2, lh, fsh, prog) ~ "{median} ({p25} - {p75}) ({min} - {max})"
    )
  )
```

- Agregar rango a todas las variables numéricas, pero reportar en otra fila nueva:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}")
    )
  )
```

- Cambiar el reporte de las variables categóricas: reportar n / N y p%

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    )
  )
```

- Reportar dos decimales para las varibles numéricas, excepto para edad (solo 1 decimal). Para las variables categóricas reportar 2 decimales solo en %, ningún decimal en las frecuencias absolutas.

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    )
  )
```


- Solo repotar datos perdidos si hay uno. Tipo: usar "ifany".

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany"
  )
```

- Denominar a los datos perdidos como "Datos faltantes":

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany", 
    missing_text = "Datos faltantes"
  )
```

- Poner en negrita los nombres de las variables:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany", 
    missing_text = "Datos faltantes"
  ) %>% 
  bold_labels()
```

- Poner en cursiva los nombres de los valores de las variables:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany", 
    missing_text = "Datos faltantes"
  ) %>% 
  bold_labels() %>%
  italicize_levels() 
```

Una tabla rara, pero sí se puede poner de negrito y cursivas tanto las etiquetas de variables como las etiquetas de valores:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany", 
    missing_text = "Datos faltantes"
  ) %>% 
  bold_labels() %>%
  italicize_labels() %>% 
  italicize_levels() %>% 
  bold_levels()
```

- Guardar tabla como objeto denominado `tabla1`:

```{r}
datos_tabla_final %>% 
  tbl_summary(
    type = list(c(height, weight, age, lh, e2, fsh, prog) ~ "continuous2"), 
    statistic = list(
      age ~ c("{mean} ± {sd}", "{min} - {max}"), 
      c(height, weight, lh, e2, fsh, prog) ~ c("{median} ({p25} - {p75})", "{min} - {max}"), 
      c(treated, race, married2, procedence) ~ c("{n} / {N} ({p}%)")
    ), 
    digits = list(
      c(treated, race, married2, procedence) ~ c(0, 0, 2), 
      age ~ c(1, 1, 0, 0), 
      c(height, weight, lh, e2, fsh, prog) ~ c(1, 1, 1, 2, 2)
    ), 
    missing = "ifany", 
    missing_text = "Datos faltantes"
  ) %>% 
  bold_labels() %>%
  italicize_levels() -> tabla1
```

```{r}
tabla1
```


- Exportar como tabla en Word:

```{r}
tabla1 %>% 
  as_flex_table() %>% 
  save_as_docx(path = "Talle_Tabla1.docx")
```

- Exportar como tabla en MS Excel:

```{r}
tabla1 %>% 
  as_hux_xlsx("Taller_Tabla1.xlsx")
```

